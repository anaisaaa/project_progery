////////////////////////////////////////////////////////////
//
// SFML - Simple and Fast Multimedia Library
// Copyright (C) 2007-2018 Laurent Gomila (laurent@sfml-dev.org)
//
// Данное программное обеспечение предоставляется "как есть", без каких-либо гарантий.
// Авторы не несут ответственности за любые убытки, вызванные использованием этого ПО.
//
// Разрешается использовать это ПО для любых целей, включая коммерческие приложения,
// а также модифицировать и свободно распространять при соблюдении следующих условий:
//
// 1. Нельзя выдавать себя за автора оригинального ПО;
//    запрещено утверждать, что вы написали оригинальное ПО.
//    При использовании в продукте, указание авторства приветствуется, но не обязательно.
//
// 2. Измененные версии должны быть явно обозначены как таковые
//    и не должны выдаваться за оригинальное ПО.
//
// 3. Данное уведомление не может быть удалено или изменено.
//
////////////////////////////////////////////////////////////

#ifndef SFML_COLOR_HPP
#define SFML_COLOR_HPP

////////////////////////////////////////////////////////////
// Заголовочные файлы
////////////////////////////////////////////////////////////
#include <SFML/Graphics/Export.hpp>

namespace sf
{
////////////////////////////////////////////////////////////
/// \brief Вспомогательный класс для работы с RGBA-цветами
///
////////////////////////////////////////////////////////////
class SFML_GRAPHICS_API Color
{
public:

    ////////////////////////////////////////////////////////////
    /// \brief Конструктор по умолчанию
    ///
    /// Создает непрозрачный черный цвет. Эквивалентно
    /// sf::Color(0, 0, 0, 255).
    ///
    ////////////////////////////////////////////////////////////
    Color();

    ////////////////////////////////////////////////////////////
    /// \brief Конструктор из компонентов RGBA
    ///
    /// \param red   Красная компонента (диапазон [0, 255])
    /// \param green Зеленая компонента (диапазон [0, 255])
    /// \param blue  Синяя компонента (диапазон [0, 255])
    /// \param alpha Альфа-канал (прозрачность) (диапазон [0, 255])
    ///
    ////////////////////////////////////////////////////////////
    Color(Uint8 red, Uint8 green, Uint8 blue, Uint8 alpha = 255);

    ////////////////////////////////////////////////////////////
    /// \brief Конструктор из 32-битного беззнакового целого
    ///
    /// \param color Число, содержащее компоненты RGBA (в таком порядке)
    ///
    ////////////////////////////////////////////////////////////
    explicit Color(Uint32 color);

    ////////////////////////////////////////////////////////////
    /// \brief Преобразование цвета в 32-битное беззнаковое целое
    ///
    /// \return Цвет в виде 32-битного беззнакового целого
    ///
    ////////////////////////////////////////////////////////////
    Uint32 toInteger() const;

    ////////////////////////////////////////////////////////////
    // Статические члены данных
    ////////////////////////////////////////////////////////////
    static const Color Black;       ///< Предопределенный черный цвет
    static const Color White;       ///< Предопределенный белый цвет
    static const Color Red;         ///< Предопределенный красный цвет
    static const Color Green;       ///< Предопределенный зеленый цвет
    static const Color Blue;        ///< Предопределенный синий цвет
    static const Color Yellow;      ///< Предопределенный желтый цвет
    static const Color Magenta;     ///< Предопределенный пурпурный цвет
    static const Color Cyan;        ///< Предопределенный голубой цвет
    static const Color Transparent; ///< Предопределенный прозрачный цвет

    ////////////////////////////////////////////////////////////
    // Члены данных
    ////////////////////////////////////////////////////////////
    Uint8 r; ///< Красная компонента
    Uint8 g; ///< Зеленая компонента
    Uint8 b; ///< Синяя компонента
    Uint8 a; ///< Альфа-канал (прозрачность)
};

////////////////////////////////////////////////////////////
/// \relates Color
/// \brief Перегрузка оператора ==
///
/// Сравнивает два цвета на равенство.
///
/// \param left  Левый операнд
/// \param right Правый операнд
///
/// \return True, если цвета равны, false если различны
///
////////////////////////////////////////////////////////////
SFML_GRAPHICS_API bool operator ==(const Color& left, const Color& right);

////////////////////////////////////////////////////////////
/// \relates Color
/// \brief Перегрузка оператора !=
///
/// Сравнивает два цвета на неравенство.
///
/// \param left  Левый операнд
/// \param right Правый операнд
///
/// \return True, если цвета различны, false если равны
///
////////////////////////////////////////////////////////////
SFML_GRAPHICS_API bool operator !=(const Color& left, const Color& right);

////////////////////////////////////////////////////////////
/// \relates Color
/// \brief Перегрузка бинарного оператора +
///
/// Возвращает покомпонентную сумму двух цветов.
/// Компоненты, превышающие 255, ограничиваются до 255.
///
/// \param left  Левый операнд
/// \param right Правый операнд
///
/// \return Результат \a left + \a right
///
////////////////////////////////////////////////////////////
SFML_GRAPHICS_API Color operator +(const Color& left, const Color& right);

////////////////////////////////////////////////////////////
/// \relates Color
/// \brief Перегрузка бинарного оператора -
///
/// Возвращает покомпонентную разность двух цветов.
/// Компоненты ниже 0 ограничиваются до 0.
///
/// \param left  Левый операнд
/// \param right Правый операнд
///
/// \return Результат \a left - \a right
///
////////////////////////////////////////////////////////////
SFML_GRAPHICS_API Color operator -(const Color& left, const Color& right);

////////////////////////////////////////////////////////////
/// \relates Color
/// \brief Перегрузка бинарного оператора *
///
/// Возвращает покомпонентное произведение (модуляцию) двух цветов.
/// Компоненты затем делятся на 255, чтобы результат оставался
/// в диапазоне [0, 255].
///
/// \param left  Левый операнд
/// \param right Правый операнд
///
/// \return Результат \a left * \a right
///
////////////////////////////////////////////////////////////
SFML_GRAPHICS_API Color operator *(const Color& left, const Color& right);

////////////////////////////////////////////////////////////
/// \relates Color
/// \brief Перегрузка оператора +=
///
/// Вычисляет покомпонентную сумму двух цветов и присваивает
/// результат левому операнду.
/// Компоненты, превышающие 255, ограничиваются до 255.
///
/// \param left  Левый операнд
/// \param right Правый операнд
///
/// \return Ссылка на \a left
///
////////////////////////////////////////////////////////////
SFML_GRAPHICS_API Color& operator +=(Color& left, const Color& right);

////////////////////////////////////////////////////////////
/// \relates Color
/// \brief Перегрузка оператора -=
///
/// Вычисляет покомпонентную разность двух цветов и присваивает
/// результат левому операнду.
/// Компоненты ниже 0 ограничиваются до 0.
///
/// \param left  Левый операнд
/// \param right Правый операнд
///
/// \return Ссылка на \a left
///
////////////////////////////////////////////////////////////
SFML_GRAPHICS_API Color& operator -=(Color& left, const Color& right);

////////////////////////////////////////////////////////////
/// \relates Color
/// \brief Перегрузка оператора *=
///
/// Вычисляет покомпонентное произведение (модуляцию) двух цветов
/// и присваивает результат левому операнду.
/// Компоненты затем делятся на 255, чтобы результат оставался
/// в диапазоне [0, 255].
///
/// \param left  Левый операнд
/// \param right Правый операнд
///
/// \return Ссылка на \a left
///
////////////////////////////////////////////////////////////
SFML_GRAPHICS_API Color& operator *=(Color& left, const Color& right);

} // namespace sf

#endif // SFML_COLOR_HPP

////////////////////////////////////////////////////////////
/// \class sf::Color
/// \ingroup graphics
///
/// sf::Color - простой класс для работы с цветами, состоящий из 4 компонент:
/// \li Красная (Red)
/// \li Зеленая (Green)
/// \li Синяя (Blue)
/// \li Альфа-канал (прозрачность)
///
/// Каждая компонента - это публичное поле, беззнаковое целое
/// в диапазоне [0, 255]. Это позволяет легко создавать и изменять цвета:
///
/// \code
/// sf::Color color(255, 0, 0); // красный
/// color.r = 0;                // делаем черным
/// color.b = 128;              // делаем темно-синим
/// \endcode
///
/// Четвертая компонента, "альфа", определяет прозрачность цвета.
/// Цвет с альфа-значением 255 будет полностью непрозрачным,
/// а значение 0 сделает цвет полностью прозрачным, независимо
/// от значений других компонент.
///
/// Наиболее распространенные цвета уже определены как статические переменные:
/// \code
/// sf::Color black       = sf::Color::Black;
/// sf::Color white       = sf::Color::White;
/// sf::Color red         = sf::Color::Red;
/// sf::Color green       = sf::Color::Green;
/// sf::Color blue        = sf::Color::Blue;
/// sf::Color yellow      = sf::Color::Yellow;
/// sf::Color magenta     = sf::Color::Magenta;
/// sf::Color cyan        = sf::Color::Cyan;
/// sf::Color transparent = sf::Color::Transparent;
/// \endcode
///
/// Цвета также можно складывать и модулировать (умножать)
/// с помощью перегруженных операторов + и *.
///
////////////////////////////////////////////////////////////
