////////////////////////////////////////////////////////////
//
// SFML - Simple and Fast Multimedia Library
// Copyright (C) 2007-2018 Laurent Gomila (laurent@sfml-dev.org)
//
// Данное программное обеспечение предоставляется "как есть", без каких-либо гарантий.
// Авторы не несут ответственности за любые убытки, вызванные использованием этого ПО.
//
// Разрешается использовать это ПО для любых целей, включая коммерческие приложения,
// а также модифицировать и свободно распространять при соблюдении следующих условий:
//
// 1. Нельзя выдавать себя за автора оригинального ПО;
//    запрещено утверждать, что вы написали оригинальное ПО.
//    При использовании в продукте, указание авторства приветствуется, но не обязательно.
//
// 2. Измененные версии должны быть явно обозначены как таковые
//    и не должны выдаваться за оригинальное ПО.
//
// 3. Данное уведомление не может быть удалено или изменено.
//
////////////////////////////////////////////////////////////

#ifndef SFML_CIRCLESHAPE_HPP
#define SFML_CIRCLESHAPE_HPP

////////////////////////////////////////////////////////////
// Заголовочные файлы
////////////////////////////////////////////////////////////
#include <SFML/Graphics/Export.hpp>
#include <SFML/Graphics/Shape.hpp>

namespace sf
{
////////////////////////////////////////////////////////////
/// \brief Специализированная фигура, представляющая окружность
///
////////////////////////////////////////////////////////////
class SFML_GRAPHICS_API CircleShape : public Shape
{
public:

    ////////////////////////////////////////////////////////////
    /// \brief Конструктор по умолчанию
    ///
    /// \param radius     Радиус окружности
    /// \param pointCount Количество точек, составляющих окружность
    ///
    ////////////////////////////////////////////////////////////
    explicit CircleShape(float radius = 0, std::size_t pointCount = 30);

    ////////////////////////////////////////////////////////////
    /// \brief Установка радиуса окружности
    ///
    /// \param radius Новый радиус окружности
    ///
    /// \see getRadius
    ///
    ////////////////////////////////////////////////////////////
    void setRadius(float radius);

    ////////////////////////////////////////////////////////////
    /// \brief Получение радиуса окружности
    ///
    /// \return Радиус окружности
    ///
    /// \see setRadius
    ///
    ////////////////////////////////////////////////////////////
    float getRadius() const;

    ////////////////////////////////////////////////////////////
    /// \brief Установка количества точек окружности
    ///
    /// \param count Новое количество точек окружности
    ///
    /// \see getPointCount
    ///
    ////////////////////////////////////////////////////////////
    void setPointCount(std::size_t count);

    ////////////////////////////////////////////////////////////
    /// \brief Получение количества точек окружности
    ///
    /// \return Количество точек окружности
    ///
    /// \see setPointCount
    ///
    ////////////////////////////////////////////////////////////
    virtual std::size_t getPointCount() const;

    ////////////////////////////////////////////////////////////
    /// \brief Получение точки окружности
    ///
    /// Возвращаемая точка находится в локальных координатах,
    /// то есть трансформации фигуры (позиция, вращение, масштаб)
    /// не учитываются.
    /// Результат не определен, если \a index выходит за допустимые пределы.
    ///
    /// \param index Индекс точки (в диапазоне [0 .. getPointCount() - 1])
    ///
    /// \return Точка с указанным индексом
    ///
    ////////////////////////////////////////////////////////////
    virtual Vector2f getPoint(std::size_t index) const;

private:

    ////////////////////////////////////////////////////////////
    // Данные-члены
    ////////////////////////////////////////////////////////////
    float       m_radius;     ///< Радиус окружности
    std::size_t m_pointCount; ///< Количество точек, составляющих окружность
};

} // namespace sf

#endif // SFML_CIRCLESHAPE_HPP

////////////////////////////////////////////////////////////
/// \class sf::CircleShape
/// \ingroup graphics
///
/// Этот класс наследует все функции sf::Transformable
/// (позиция, вращение, масштаб, границы и т.д.), а также
/// функции sf::Shape (контур, цвет, текстура и т.д.).
///
/// Пример использования:
/// \code
/// sf::CircleShape circle;
/// circle.setRadius(150);
/// circle.setOutlineColor(sf::Color::Red);
/// circle.setOutlineThickness(5);
/// circle.setPosition(10, 20);
/// ...
/// window.draw(circle);
/// \endcode
///
/// Поскольку видеокарта не может рисовать идеальные окружности,
/// мы имитируем их с помощью множества соединенных треугольников.
/// Свойство "количество точек" определяет, сколько таких треугольников
/// использовать, и тем самым влияет на качество отображения окружности.
///
/// Количество точек также можно использовать для других целей:
/// с малым количеством точек можно создавать правильные многоугольники:
/// равносторонний треугольник, квадрат, пятиугольник, шестиугольник и т.д.
///
/// \see sf::Shape, sf::RectangleShape, sf::ConvexShape
///
////////////////////////////////////////////////////////////
