////////////////////////////////////////////////////////////
//
// SFML - Simple and Fast Multimedia Library
// Copyright (C) 2007-2018 Laurent Gomila (laurent@sfml-dev.org)
//
// Данное программное обеспечение предоставляется "как есть", без каких-либо гарантий.
// Авторы не несут ответственности за любые убытки, вызванные использованием этого ПО.
//
// Разрешается использовать это ПО для любых целей, включая коммерческие приложения,
// а также модифицировать и свободно распространять при соблюдении следующих условий:
//
// 1. Нельзя выдавать себя за автора оригинального ПО;
//    запрещено утверждать, что вы написали оригинальное ПО.
//    При использовании в продукте, указание авторства приветствуется, но не обязательно.
//
// 2. Измененные версии должны быть явно обозначены как таковые
//    и не должны выдаваться за оригинальное ПО.
//
// 3. Данное уведомление не может быть удалено или изменено.
//
////////////////////////////////////////////////////////////

#ifndef SFML_BLENDMODE_HPP
#define SFML_BLENDMODE_HPP

////////////////////////////////////////////////////////////
// Заголовочные файлы
////////////////////////////////////////////////////////////
#include <SFML/Graphics/Export.hpp>

namespace sf
{

////////////////////////////////////////////////////////////
/// \brief Режимы смешивания цветов при отрисовке
///
////////////////////////////////////////////////////////////
struct SFML_GRAPHICS_API BlendMode
{
    ////////////////////////////////////////////////////////
    /// \brief Перечисление факторов смешивания
    ///
    /// Факторы соответствуют их аналогам в OpenGL,
    /// задаваемым через glBlendFunc() или glBlendFuncSeparate().
    ////////////////////////////////////////////////////////
    enum Factor
    {
        Zero,             ///< (0, 0, 0, 0)
        One,              ///< (1, 1, 1, 1)
        SrcColor,         ///< (src.r, src.g, src.b, src.a)
        OneMinusSrcColor, ///< (1, 1, 1, 1) - (src.r, src.g, src.b, src.a)
        DstColor,         ///< (dst.r, dst.g, dst.b, dst.a)
        OneMinusDstColor, ///< (1, 1, 1, 1) - (dst.r, dst.g, dst.b, dst.a)
        SrcAlpha,         ///< (src.a, src.a, src.a, src.a)
        OneMinusSrcAlpha, ///< (1, 1, 1, 1) - (src.a, src.a, src.a, src.a)
        DstAlpha,         ///< (dst.a, dst.a, dst.a, dst.a)
        OneMinusDstAlpha  ///< (1, 1, 1, 1) - (dst.a, dst.a, dst.a, dst.a)
    };

    ////////////////////////////////////////////////////////
    /// \brief Перечисление уравнений смешивания
    ///
    /// Уравнения соответствуют их аналогам в OpenGL,
    /// задаваемым через glBlendEquation() или glBlendEquationSeparate().
    ////////////////////////////////////////////////////////
    enum Equation
    {
        Add,            ///< Пиксель = Src * SrcFactor + Dst * DstFactor
        Subtract,       ///< Пиксель = Src * SrcFactor - Dst * DstFactor
        ReverseSubtract ///< Пиксель = Dst * DstFactor - Src * SrcFactor
    };

    ////////////////////////////////////////////////////////////
    /// \brief Конструктор по умолчанию
    ///
    /// Создает режим смешивания с альфа-каналом.
    ///
    ////////////////////////////////////////////////////////////
    BlendMode();

    ////////////////////////////////////////////////////////////
    /// \brief Конструктор с заданными факторами и уравнением
    ///
    /// Использует одинаковые факторы и уравнение для цветовых
    /// и альфа-компонентов. По умолчанию уравнение - Add.
    ///
    /// \param sourceFactor      Определяет коэффициент источника для цветовых и альфа-каналов
    /// \param destinationFactor Определяет коэффициент назначения для цветовых и альфа-каналов
    /// \param blendEquation     Определяет уравнение смешивания цветов и альфа-канала
    ///
    ////////////////////////////////////////////////////////////
    BlendMode(Factor sourceFactor, Factor destinationFactor, Equation blendEquation = Add);

    ////////////////////////////////////////////////////////////
    /// \brief Конструктор с раздельными параметрами для цветов и альфа-канала
    ///
    /// \param colorSourceFactor      Коэффициент источника для цветовых каналов
    /// \param colorDestinationFactor Коэффициент назначения для цветовых каналов
    /// \param colorBlendEquation     Уравнение смешивания цветов
    /// \param alphaSourceFactor      Коэффициент источника для альфа-канала
    /// \param alphaDestinationFactor Коэффициент назначения для альфа-канала
    /// \param alphaBlendEquation     Уравнение смешивания альфа-канала
    ///
    ////////////////////////////////////////////////////////////
    BlendMode(Factor colorSourceFactor, Factor colorDestinationFactor,
              Equation colorBlendEquation, Factor alphaSourceFactor,
              Factor alphaDestinationFactor, Equation alphaBlendEquation);

    ////////////////////////////////////////////////////////////
    // Данные-члены
    ////////////////////////////////////////////////////////////
    Factor   colorSrcFactor; ///< Коэффициент источника для цветовых каналов
    Factor   colorDstFactor; ///< Коэффициент назначения для цветовых каналов
    Equation colorEquation;  ///< Уравнение смешивания цветов
    Factor   alphaSrcFactor; ///< Коэффициент источника для альфа-канала
    Factor   alphaDstFactor; ///< Коэффициент назначения для альфа-канала
    Equation alphaEquation;  ///< Уравнение смешивания альфа-канала
};

////////////////////////////////////////////////////////////
/// \relates BlendMode
/// \brief Перегрузка оператора ==
///
/// \param left  Левый операнд
/// \param right Правый операнд
///
/// \return True если режимы смешивания равны, false если различны
///
////////////////////////////////////////////////////////////
SFML_GRAPHICS_API bool operator ==(const BlendMode& left, const BlendMode& right);

////////////////////////////////////////////////////////////
/// \relates BlendMode
/// \brief Перегрузка оператора !=
///
/// \param left  Левый операнд
/// \param right Правый операнд
///
/// \return True если режимы смешивания различны, false если равны
///
////////////////////////////////////////////////////////////
SFML_GRAPHICS_API bool operator !=(const BlendMode& left, const BlendMode& right);

////////////////////////////////////////////////////////////
// Стандартные режимы смешивания
////////////////////////////////////////////////////////////
SFML_GRAPHICS_API extern const BlendMode BlendAlpha;    ///< Смешивание с учетом альфа-канала
SFML_GRAPHICS_API extern const BlendMode BlendAdd;      ///< Аддитивное смешивание
SFML_GRAPHICS_API extern const BlendMode BlendMultiply; ///< Мультипликативное смешивание
SFML_GRAPHICS_API extern const BlendMode BlendNone;     ///< Без смешивания (перезапись)

} // namespace sf

#endif // SFML_BLENDMODE_HPP

////////////////////////////////////////////////////////////
/// \class sf::BlendMode
/// \ingroup graphics
///
/// sf::BlendMode представляет режим смешивания цветов.
/// Режим смешивания определяет, как цвета рисуемого объекта
/// комбинируются с уже существующими цветами в буфере.
///
/// Класс состоит из 6 компонентов:
/// \li Коэффициент источника для цвета (@ref colorSrcFactor)
/// \li Коэффициент назначения для цвета (@ref colorDstFactor)
/// \li Уравнение смешивания цветов (@ref colorEquation)
/// \li Коэффициент источника для альфа-канала (@ref alphaSrcFactor)
/// \li Коэффициент назначения для альфа-канала (@ref alphaDstFactor)
/// \li Уравнение смешивания альфа-канала (@ref alphaEquation)
///
/// Коэффициент источника определяет вклад рисуемого пикселя
/// в конечный цвет. Коэффициент назначения определяет вклад
/// пикселя, уже находящегося в буфере.
///
/// Цветовые каналы (RGB) и альфа-канал (A) могут обрабатываться
/// раздельно. Это полезно для специальных режимов смешивания,
/// но чаще можно обрабатывать цвет как единое целое.
///
/// Формула расчета конечного цвета:
/// \code
/// dst.rgb = colorSrcFactor * src.rgb (colorEquation) colorDstFactor * dst.rgb
/// dst.a   = alphaSrcFactor * src.a   (alphaEquation) alphaDstFactor * dst.a
/// \endcode
/// Все коэффициенты и цвета представляются числами с плавающей точкой
/// в диапазоне [0, 1]. При необходимости результат ограничивается этим диапазоном.
///
/// Стандартные режимы смешивания определены как константы:
///
/// \code
/// sf::BlendMode alphaBlending          = sf::BlendAlpha;
/// sf::BlendMode additiveBlending       = sf::BlendAdd;
/// sf::BlendMode multiplicativeBlending = sf::BlendMultiply;
/// sf::BlendMode noBlending             = sf::BlendNone;
/// \endcode
///
/// В SFML режим смешивания можно задавать при отрисовке объектов
/// на целевой рендер. Он является частью структуры sf::RenderStates,
/// передаваемой в функцию sf::RenderTarget::draw().
///
/// \see sf::RenderStates, sf::RenderTarget
///
////////////////////////////////////////////////////////////
